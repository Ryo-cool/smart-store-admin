// Code generated by MockGen. DO NOT EDIT.
// Source: service/sale_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	models "smart-store-admin/backend/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSaleServiceInterface is a mock of SaleServiceInterface interface.
type MockSaleServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSaleServiceInterfaceMockRecorder
}

// MockSaleServiceInterfaceMockRecorder is the mock recorder for MockSaleServiceInterface.
type MockSaleServiceInterfaceMockRecorder struct {
	mock *MockSaleServiceInterface
}

// NewMockSaleServiceInterface creates a new mock instance.
func NewMockSaleServiceInterface(ctrl *gomock.Controller) *MockSaleServiceInterface {
	mock := &MockSaleServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSaleServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleServiceInterface) EXPECT() *MockSaleServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSaleServiceInterface) Create(ctx context.Context, sale *models.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSaleServiceInterfaceMockRecorder) Create(ctx, sale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSaleServiceInterface)(nil).Create), ctx, sale)
}

// GetDailySales mocks base method.
func (m *MockSaleServiceInterface) GetDailySales(ctx context.Context, date time.Time) ([]*models.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailySales", ctx, date)
	ret0, _ := ret[0].([]*models.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailySales indicates an expected call of GetDailySales.
func (mr *MockSaleServiceInterfaceMockRecorder) GetDailySales(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailySales", reflect.TypeOf((*MockSaleServiceInterface)(nil).GetDailySales), ctx, date)
}

// GetEnvironmentalImpactAnalytics mocks base method.
func (m *MockSaleServiceInterface) GetEnvironmentalImpactAnalytics(ctx context.Context, start, end time.Time) (*models.EnvironmentalImpact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentalImpactAnalytics", ctx, start, end)
	ret0, _ := ret[0].(*models.EnvironmentalImpact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentalImpactAnalytics indicates an expected call of GetEnvironmentalImpactAnalytics.
func (mr *MockSaleServiceInterfaceMockRecorder) GetEnvironmentalImpactAnalytics(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentalImpactAnalytics", reflect.TypeOf((*MockSaleServiceInterface)(nil).GetEnvironmentalImpactAnalytics), ctx, start, end)
}

// GetSalesByCategory mocks base method.
func (m *MockSaleServiceInterface) GetSalesByCategory(ctx context.Context, start, end time.Time) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByCategory", ctx, start, end)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByCategory indicates an expected call of GetSalesByCategory.
func (mr *MockSaleServiceInterfaceMockRecorder) GetSalesByCategory(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByCategory", reflect.TypeOf((*MockSaleServiceInterface)(nil).GetSalesByCategory), ctx, start, end)
}

// GetSalesByDateRange mocks base method.
func (m *MockSaleServiceInterface) GetSalesByDateRange(ctx context.Context, start, end time.Time) ([]*models.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByDateRange", ctx, start, end)
	ret0, _ := ret[0].([]*models.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByDateRange indicates an expected call of GetSalesByDateRange.
func (mr *MockSaleServiceInterfaceMockRecorder) GetSalesByDateRange(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByDateRange", reflect.TypeOf((*MockSaleServiceInterface)(nil).GetSalesByDateRange), ctx, start, end)
}

// GetSalesByTimeOfDay mocks base method.
func (m *MockSaleServiceInterface) GetSalesByTimeOfDay(ctx context.Context, timeOfDay string) ([]*models.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByTimeOfDay", ctx, timeOfDay)
	ret0, _ := ret[0].([]*models.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByTimeOfDay indicates an expected call of GetSalesByTimeOfDay.
func (mr *MockSaleServiceInterfaceMockRecorder) GetSalesByTimeOfDay(ctx, timeOfDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByTimeOfDay", reflect.TypeOf((*MockSaleServiceInterface)(nil).GetSalesByTimeOfDay), ctx, timeOfDay)
}
