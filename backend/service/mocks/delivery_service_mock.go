// Code generated by MockGen. DO NOT EDIT.
// Source: service/delivery_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	models "smart-store-admin/backend/models"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDeliveryServiceInterface is a mock of DeliveryServiceInterface interface.
type MockDeliveryServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceInterfaceMockRecorder
}

// MockDeliveryServiceInterfaceMockRecorder is the mock recorder for MockDeliveryServiceInterface.
type MockDeliveryServiceInterfaceMockRecorder struct {
	mock *MockDeliveryServiceInterface
}

// NewMockDeliveryServiceInterface creates a new mock instance.
func NewMockDeliveryServiceInterface(ctrl *gomock.Controller) *MockDeliveryServiceInterface {
	mock := &MockDeliveryServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryServiceInterface) EXPECT() *MockDeliveryServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockDeliveryServiceInterface) CreateDelivery(ctx context.Context, delivery *models.Delivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", ctx, delivery)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockDeliveryServiceInterfaceMockRecorder) CreateDelivery(ctx, delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).CreateDelivery), ctx, delivery)
}

// GetActiveDeliveries mocks base method.
func (m *MockDeliveryServiceInterface) GetActiveDeliveries(ctx context.Context) ([]*models.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDeliveries", ctx)
	ret0, _ := ret[0].([]*models.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDeliveries indicates an expected call of GetActiveDeliveries.
func (mr *MockDeliveryServiceInterfaceMockRecorder) GetActiveDeliveries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDeliveries", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).GetActiveDeliveries), ctx)
}

// GetDeliveriesByRobot mocks base method.
func (m *MockDeliveryServiceInterface) GetDeliveriesByRobot(ctx context.Context, robotID string) ([]*models.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveriesByRobot", ctx, robotID)
	ret0, _ := ret[0].([]*models.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveriesByRobot indicates an expected call of GetDeliveriesByRobot.
func (mr *MockDeliveryServiceInterfaceMockRecorder) GetDeliveriesByRobot(ctx, robotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveriesByRobot", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).GetDeliveriesByRobot), ctx, robotID)
}

// GetDeliveryByID mocks base method.
func (m *MockDeliveryServiceInterface) GetDeliveryByID(ctx context.Context, id primitive.ObjectID) (*models.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryByID", ctx, id)
	ret0, _ := ret[0].(*models.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryByID indicates an expected call of GetDeliveryByID.
func (mr *MockDeliveryServiceInterfaceMockRecorder) GetDeliveryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryByID", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).GetDeliveryByID), ctx, id)
}

// UpdateDeliveryLocation mocks base method.
func (m *MockDeliveryServiceInterface) UpdateDeliveryLocation(ctx context.Context, id primitive.ObjectID, location models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeliveryLocation", ctx, id, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeliveryLocation indicates an expected call of UpdateDeliveryLocation.
func (mr *MockDeliveryServiceInterfaceMockRecorder) UpdateDeliveryLocation(ctx, id, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeliveryLocation", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).UpdateDeliveryLocation), ctx, id, location)
}

// UpdateDeliveryStatus mocks base method.
func (m *MockDeliveryServiceInterface) UpdateDeliveryStatus(ctx context.Context, id primitive.ObjectID, status models.DeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeliveryStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeliveryStatus indicates an expected call of UpdateDeliveryStatus.
func (mr *MockDeliveryServiceInterfaceMockRecorder) UpdateDeliveryStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeliveryStatus", reflect.TypeOf((*MockDeliveryServiceInterface)(nil).UpdateDeliveryStatus), ctx, id, status)
}
