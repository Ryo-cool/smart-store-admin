// Code generated by MockGen. DO NOT EDIT.
// Source: service/store_operation_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	"github.com/onoderaryou/smart-store-admin/backend/models"
	"github.com/onoderaryou/smart-store-admin/backend/service"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockStoreOperationServiceInterface is a mock of StoreOperationServiceInterface interface.
type MockStoreOperationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreOperationServiceInterfaceMockRecorder
}

// MockStoreOperationServiceInterfaceMockRecorder is the mock recorder for MockStoreOperationServiceInterface.
type MockStoreOperationServiceInterfaceMockRecorder struct {
	mock *MockStoreOperationServiceInterface
}

// NewMockStoreOperationServiceInterface creates a new mock instance.
func NewMockStoreOperationServiceInterface(ctrl *gomock.Controller) *MockStoreOperationServiceInterface {
	mock := &MockStoreOperationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockStoreOperationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreOperationServiceInterface) EXPECT() *MockStoreOperationServiceInterfaceMockRecorder {
	return m.recorder
}

// GetEnergyUsageAnalytics mocks base method.
func (m *MockStoreOperationServiceInterface) GetEnergyUsageAnalytics(ctx context.Context, start, end time.Time) (*service.EnergyUsageAnalytics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnergyUsageAnalytics", ctx, start, end)
	ret0, _ := ret[0].(*service.EnergyUsageAnalytics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnergyUsageAnalytics indicates an expected call of GetEnergyUsageAnalytics.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) GetEnergyUsageAnalytics(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnergyUsageAnalytics", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).GetEnergyUsageAnalytics), ctx, start, end)
}

// GetLatestOperation mocks base method.
func (m *MockStoreOperationServiceInterface) GetLatestOperation(ctx context.Context) (*models.StoreOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestOperation", ctx)
	ret0, _ := ret[0].(*models.StoreOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestOperation indicates an expected call of GetLatestOperation.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) GetLatestOperation(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestOperation", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).GetLatestOperation), ctx)
}

// GetOperationsByTimeRange mocks base method.
func (m *MockStoreOperationServiceInterface) GetOperationsByTimeRange(ctx context.Context, start, end time.Time) ([]*models.StoreOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsByTimeRange", ctx, start, end)
	ret0, _ := ret[0].([]*models.StoreOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsByTimeRange indicates an expected call of GetOperationsByTimeRange.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) GetOperationsByTimeRange(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsByTimeRange", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).GetOperationsByTimeRange), ctx, start, end)
}

// RecordStoreOperation mocks base method.
func (m *MockStoreOperationServiceInterface) RecordStoreOperation(ctx context.Context, op *models.StoreOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordStoreOperation", ctx, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordStoreOperation indicates an expected call of RecordStoreOperation.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) RecordStoreOperation(ctx, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStoreOperation", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).RecordStoreOperation), ctx, op)
}

// UpdateCheckoutStatus mocks base method.
func (m *MockStoreOperationServiceInterface) UpdateCheckoutStatus(ctx context.Context, opID primitive.ObjectID, status models.CheckoutStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckoutStatus", ctx, opID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckoutStatus indicates an expected call of UpdateCheckoutStatus.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) UpdateCheckoutStatus(ctx, opID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckoutStatus", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).UpdateCheckoutStatus), ctx, opID, status)
}

// UpdateShelfStatus mocks base method.
func (m *MockStoreOperationServiceInterface) UpdateShelfStatus(ctx context.Context, opID primitive.ObjectID, status models.ShelfStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShelfStatus", ctx, opID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShelfStatus indicates an expected call of UpdateShelfStatus.
func (mr *MockStoreOperationServiceInterfaceMockRecorder) UpdateShelfStatus(ctx, opID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShelfStatus", reflect.TypeOf((*MockStoreOperationServiceInterface)(nil).UpdateShelfStatus), ctx, opID, status)
}
